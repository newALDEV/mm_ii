# 타이머 예제 및 asio 익숙해지기

#include <bits/stdc++.h>
#include <boost/asio.hpp>
#include <boost/bind.hpp>
#include <boost/date_time/posix_time/posix_time.hpp>

void print(const boost::system::error_code& ,boost::asio::deadline_timer* t, int* count)
{
    if (*count < 5)
    {
        std::cout << *count << std::endl; //카운트 출력
        ++(*count); //count ++

        t->expires_at(t->expires_at() + boost::posix_time::seconds(1)); // ->는 포인터를 통해 접근
        t->async_wait(boost::bind(print, boost::asio::placeholders::error, t, count)); //오버로딩
    }
}

int main()
{
    boost::asio::io_service io; //접속한 것을 저장하는 저장소느낌

    int count = 0;
    boost::asio::deadline_timer t(io, boost::posix_time::seconds(1));
    t.async_wait(boost::bind(print, boost::asio::placeholders::error, &t, &count));
    
    io.run(); // 루프를 실행시키는 역할
    
    std::cout << "Final count is " << count << std::endl;
    
    return 0;
}

# C++ ->

참고 사이트 : https://codemasterkimc.tistory.com/14



```
세줄 요약(이것만 기억하시면 됩니다)
 
. 은 클래스의 멤버를 직접 접근합니다.
 
->은 포인터를 통해 멤버를 접근합니다.
 
x->y 은 (*x).y
```

# typedef

참고 사이트 : https://dojang.io/mod/page/view.php?id=409

typedef는 자료형의 별칭을 만드는 기능

```
typedef int MYINT;      // int를 별칭 MYINT로 정의
typedef int* PMYINT;    // int 포인터를 별칭 PMYINT로 정의

MYINT num1;        // MYINT로 변수 선언
PMYINT numPtr1;    // PMYINT로 포인터 변수 선언

numPtr1 = &num1;   // 포인터에 변수의 주소 저장
                   // 사용 방법은 일반 변수, 포인터와 같음    
```

## 구조체 태그

```
struct 태그 {
    자료형 멤버이름;
};

typedef struct 태그 {
    자료형 멤버이름;
} 타입이름;
```



# io_service

참고 사이트 : https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=njh0602&logNo=221096093619



io_service는 운영 체제의 리소스에 접근하여 i/o요청을 수행하는 프로그램을 운영체제와 상호작용 할 수 있도록 중개하는 역할



# expires_at

참고 사이트 : https://devdockr.tistory.com/701 및 https://think-async.com/Asio/boost_asio_1_18_0/doc/html/boost_asio/reference/basic_deadline_timer/expires_at/overload1.html (공식사이트)

deadline_timer 에서 사용하는 절대 시간 타임아웃을 사용할 때 많이사용함

